/*
 * TCSS 305 Autumn 2022
 * Assignment 5
 */

package model;

import java.awt.Color;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.geom.Rectangle2D;

/**
 * Represents a pre-constructed shape.
 * 
 * @author Jacob Erickson
 * @version 2022.11.29
 */
public class LegacyShape {
    
    /** The shape of the object. */
    private final Shape myShape;
    
    /** The thickness of the brush. */
    private final int myThickness;
    
    /** The color of the object. */
    private final Color myColor;
    
    /** The fill color of the object. */
    private final Color myFillColor;

    
    /** 
     * Constructs a shape to store in memory that has a fill color.
     * 
     * @param The shape.
     * @param The thickness.
     * @param The color.
     * @param The fill color.
     */
    public LegacyShape(final Shape theShape, final int theThickness, final Color theColor,
            final Color theFillColor) {
        
        myShape = shapeHelper(theShape);
        myThickness = theThickness;
        myColor = theColor;
        myFillColor = theFillColor;  
    }
    
    /** 
     * Constructs a shape to store in memory that has no fill color.
     * 
     * @param The shape.
     * @param The thickness.
     * @param The color.
     */
    public LegacyShape(final Shape theShape, final int theThickness, final Color theColor) {
        
        this(theShape, theThickness, theColor, null);
        
    }
    
    /**
     * Returns a new version of the shape to save.
     * @param theShape The shape to use.
     * @return A copy of the shape to save.
     */
    private Shape shapeHelper(final Shape theShape) {
        Shape s = theShape;
        if (theShape instanceof Line2D.Double) {
            final Line2D l = (Line2D.Double) theShape;
            s = new Line2D.Double(l.getP1(), l.getP2());
        } else if (theShape instanceof Rectangle2D.Double) {
            final Rectangle2D r = (Rectangle2D.Double) theShape;
            s = new Rectangle2D.Double(r.getX(), r.getY(), r.getWidth(), r.getHeight());
        } else if (theShape instanceof Ellipse2D.Double) {
            final Ellipse2D e = (Ellipse2D.Double) theShape;
            s = new Ellipse2D.Double(e.getX(), e.getY(), e.getWidth(), e.getHeight());
        } else {
            s = new Path2D.Double(theShape);
        }
        
        return s;
    }
    
    /**
     * Returns the Shape in memory.
     * @return The shape.
     */
    public Shape getShape() {
        
        final Shape returnShape;
        
        if (myShape instanceof Line2D.Double) {
            final Line2D.Double l = (Line2D.Double) myShape;
            returnShape = new Line2D.Double(l.getP1(), l.getP2());
        } else if (myShape instanceof Rectangle2D.Double) {
            final Rectangle2D.Double r = (Rectangle2D.Double) myShape;
            returnShape = new Rectangle2D.Double(r.getX(), r.getY(), 
                    r.getWidth(), r.getHeight());
        } else if (myShape instanceof Ellipse2D.Double) {
            final Ellipse2D.Double e = (Ellipse2D.Double) myShape;
            returnShape = new Ellipse2D.Double(e.getX(), e.getY(), 
                    e.getWidth(), e.getHeight());
        } else {
            returnShape = new Path2D.Double(myShape);
        }
        
        return returnShape;
    }
    
    /**
     * Returns the thickness in memory.
     * @return The thickness.
     */
    public int getThickness() {
        return myThickness;
    }
    
    /**
     * Returns the color in memory.
     * @return The color.
     */
    public Color getColor() {
        return myColor;
    }
    
    /**
     * Returns the fill color in memory.
     * @return The color.
     */
    public Color getFillColor() {
        return myFillColor;
    }
    
}
